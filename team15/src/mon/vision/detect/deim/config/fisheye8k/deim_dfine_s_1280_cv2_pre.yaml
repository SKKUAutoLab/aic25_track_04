# ----- Global Settings & Hyperparameters -----
# These settings can be overridden by the CLI.
root        : ~                                                                 # Root directory of the current run.
task        : &task "detect"                                                    # Task name (e.g., detect, segment, classify).
mode        : &mode "train"                                                     # Mode name (e.g., train, val, test, predict, export).
arch        : &arch "deim"                                                      # Model architecture or family (e.g., resnet).
model       : &model "deim_dfine_s"                                             # Model name (e.g., resnet50).
data        : &data "fisheye8kv0"                                               # Dataset name (e.g., cifar10) or directory (e.g., data/cifar10).
fullname    : &fullname "deim_dfine_s_1280_cv2_pre"                             # Full name of the current run (e.g., resnet50_cifar10_01). If not set, it will be this file's name.
save_dir    : &save_dir ~                                                       # Saving directory. If not set, it will be `root/arch/model/data`.
weights     : &weights "run/train/deim_dfine_s_1280_cv2_pre/best_stg2_f1.pth"   # Path to the pretrained weights.
device      : &device cuda:0,1,2,3                                              # Running device (i.e., cuda:0 | cuda:0,1,2,3 | cpu).
seed        : &seed 0                                                           # Random seed.
imgsz       : &imgsz 1280                                                       # Image size for the model.
# Train
resume      : &resume "run/train/deim_dfine_s_1280_cv2_pre/best_stg1_f1.pth"    # Resume from interrupted training.
tuning      : &tuning "zoo/vision/detect/deim/deim_dfine_s/coco80/deim_dfine_s_coco80.pth"  # Fine-tuning from a pretrained model.
epochs      : &epochs 50                                                        # Training epochs.
batch_size  : &batch_size 16                                                    # Batch size.
torchrun    : True                                                              # If ``True``, use torch.distributed.run to run the training script.
master_port : 7777                                                              # Master port for distributed training.
master_addr : "localhost"                                                       # Master address for distributed training.
local_rank  : -1                                                                # Local rank for distributed training.
# Predict
resize      : True                                                              # Resize the input image to `imgsz`.
benchmark   : False                                                             # Benchmark the model.
# Save & Visualize
save_result : &save_result True                                                 # Save the result of the model.
save_image  : &save_image True                                                  # Save the output image.
save_debug  : &save_debug False                                                 # Save the debug information.
use_fullname: True                                                              # Use the full name for the save_dir.
keep_subdirs: False                                                             # Keep subdirectories in the save_dir.
save_nearby : False                                                             # Save outputs nearby the source.
exist_ok    : &exist_ok True                                                    # If ``False``, it will delete the save directory if it already exists.
verbose     : &verbose True                                                     # Verbosity.
# Export
format        : "onnx"                                                          # Export format (e.g., onnx, engine, torchscript, coreml, tflite, openvino).
opset         : 16                                                              # ONNX: opset version.
simplify      : False                                                           # ONNX: Simplify model using `onnxslim`.
trt_precision : "fp32"                                                          # TRT: Precision mode (e.g., fp32, fp16, int8).
max_batch_size: 32                                                              # TRT: Max batch size for export.
opt_batch_size: 16                                                              # TRT: Optimize batch size for export.
min_batch_size: 1                                                               # TRT: Min batch size for export.
# Custom config.yaml
cfg: "deim_dfine/coco80/deim_hgnetv2_s_coco80.yaml"                             # For overriding settings defined in this file.

# ----- Custom Settings -----
test_only           : False                                                     # Test only.
print_method        : "builtin"                                                 # Print method.
print_rank          : 0                                                         # Print rank ID.
conf_thres          : 0.80                                                      # Confidence threshold for detection.
export_postprocessor: True                                                      # Export postprocessor for inference.

# Update configurations in ``cfg``
updated_cfg:
  # File: deim_hgnetv2_s_coco80.yaml
  __include__: [
    "./dfine_hgnetv2_s_coco80.yaml",
    "../../dataset/fisheye8kv0_detection.yaml",
    "../../base/dataloader.yaml",
    "../../base/deim.yaml"
  ]

  epoches: *epochs  # Training epochs.

  # File: runtime.yaml
  use_amp: False                                                                # Use automatic mixed precision (AMP) for training.

  # File: dfine_hgnetv2.yaml
  eval_spatial_size: [*imgsz, *imgsz]

  PostProcessor:
    num_top_queries       : 300                                                 # max_dets
    deploy_num_top_queries: 150
    deploy_out_fmt        : "xywh"

  # File: dataloader.yaml
  train_dataloader:
    dataset:
      transforms:
        # File: deim.yaml
        ops:
          - { type: Mosaic, output_size: 320, rotation_range: 10, translation_range: [ 0.1, 0.1 ], scaling_range: [ 0.5, 1.5 ],
              probability: 1.0, fill_value: 0, use_cache: False, max_cached_images: 50, random_pop: True }
          - { type: RandomPhotometricDistort, p: 0.5 }
          - { type: RandomZoomOut, fill: 0 }
          - { type: RandomIoUCrop, p: 0.8 }
          - { type: SanitizeBoundingBoxes, min_size: 1 }
          - { type: RandomHorizontalFlip }
          - { type: ResizeCV, size: [ *imgsz, *imgsz ], }
          - { type: SanitizeBoundingBoxes, min_size: 1 }
          - { type: ConvertNumpyImage, dtype: "float32", scale: True }
          - { type: ConvertBoxes, fmt: "cxcywh", normalize: True }

    collate_fn:
      base_size: *imgsz

    total_batch_size: *batch_size  # total batch size equals to 32 (4 * 8)

  val_dataloader:
    dataset:
      transforms:
        ops:
          - { type: ResizeCV, size: [ *imgsz, *imgsz ], }
          - { type: ConvertNumpyImage, dtype: "float32", scale: True }
    total_batch_size: *batch_size
