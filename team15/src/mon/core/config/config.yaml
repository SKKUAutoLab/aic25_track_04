# ----- Global Settings & Hyperparameters -----
# These settings can be overridden by the CLI.
root        : ~                                                                 # Root directory of the current run.
task        : &task ~                                                           # Task name (e.g., detect, segment, classify).
mode        : &mode "train"                                                     # Mode name (e.g., train, val, test, predict, export).
arch        : &arch ~                                                           # Model architecture or family (e.g., resnet).
model       : &model ~                                                          # Model name (e.g., resnet50).
data        : &data ~                                                           # Dataset name (e.g., cifar10) or directory (e.g., data/cifar10).
fullname    : &fullname ~                                                       # Full name of the current run (e.g., resnet50_cifar10_01). If not set, it will be this file's name.
save_dir    : &save_dir ~                                                       # Saving directory. If not set, it will be `root/arch/model/data`.
weights     : &weights ~                                                        # Path to the pretrained weights.
device      : &device 0                                                         # Running device (i.e., cuda:0 | cuda:0,1,2,3 | cpu).
seed        : &seed 0                                                           # Random seed.
imgsz       : &imgsz 512                                                        # Image size for the model.
# Train
resume      : &resume ~                                                         # Resume from interrupted training.
tuning      : &tuning ~                                                         # Fine-tuning from a pretrained model.
epochs      : &epochs -1                                                        # Training epochs.
batch_size  : &batch_size 1                                                     # Batch size.
torchrun    : False                                                             # If ``True``, use torch.distributed.run to run the training script.
master_port : 7777                                                              # Master port for distributed training.
master_addr : "localhost"                                                       # Master address for distributed training.
local_rank  : -1                                                                # Local rank for distributed training.
# Predict
resize      : False                                                             # Resize the input image to `imgsz`.
benchmark   : False                                                             # Benchmark the model.
# Save & Visualize
save_result : &save_result True                                                 # Save the result of the model.
save_image  : &save_image True                                                  # Save the output image.
save_debug  : &save_debug False                                                 # Save the debug information.
use_fullname: True                                                              # Use the full name for the save_dir.
keep_subdirs: False                                                             # Keep subdirectories in the save_dir.
save_nearby : False                                                             # Save outputs nearby the source.
exist_ok    : &exist_ok True                                                    # If ``False``, it will delete the save directory if it already exists.
verbose     : &verbose True                                                     # Verbosity.
# Export
format        : "onnx"                                                          # Export format (e.g., onnx, engine, torchscript, coreml, tflite, openvino).
opset         : 16                                                              # ONNX: opset version.
simplify      : False                                                           # ONNX: Simplify model using `onnxslim`.
trt_precision : "fp32"                                                          # TRT: Precision mode (e.g., fp32, fp16, int8).
max_batch_size: 32                                                              # TRT: Max batch size for export.
opt_batch_size: 16                                                              # TRT: Optimize batch size for export.
min_batch_size: 1                                                               # TRT: Min batch size for export.
# Custom config.yaml
cfg: ~                                                                          # For overriding settings defined in this file.

# ----- Modules -----
# Network
network: &network                                                               # Network architecture.
  num_classes: ~                                                                # Number of classes (for classification task).

# Optimizer
optimizer: &optimizer                                                           # Optimizer(s).
  optimizer:
    name: "adam"
    lr  : 0.0001
  lr_scheduler       : ~                                                        # Learning rate scheduler.s
  network_params_only: True

# Loss
loss: &loss ~                                                                   # Loss function.

# Metric
metrics: &metrics                                                               # Metrics for evaluation.
  train: ~
  val  : ~
  test : ~

# Model-module (Note: I want to name this `model`, but it conflicts with the `model` key in the basic section)
modelmodule:
  name     : *model                                                             # Model name (e.g., resnet50).
  root     : *save_dir                                                          # Root directory of the current run.
  fullname : *fullname                                                          # Full name of the current run (e.g., resnet50_cifar10_01).
  <<       : *network                                                           # Network architecture.
  weights  : *weights                                                           # Path to the pretrained weights.
  optimizer: *optimizer                                                         # Optimizer(s).
  loss     : *loss                                                              # Loss function.
  metrics  : *metrics                                                           # Metrics for evaluation.
  debug    : *save_debug
  verbose  : *verbose                                                           # Verbosity.

# Datamodule
datamodule:
  name      : *data                                                             # Data module name (e.g., cifar10).
  root      : "data/"                                                           # Root directory of the dataset.
  transform :                                                                   # Data augmentation.
    - {name: "resize", height: *imgsz, width : *imgsz}
  to_tensor : True                                                              # If ``True``, convert the data to tensor.
  batch_size: *batch_size                                                       # Batch size.
  cache_data: False                                                             # If ``True``, cache the data.
  shuffle   : True                                                              # If ``True``, shuffle the data.
  verbose   : *verbose                                                          # Verbosity.

# Trainer
trainer:
  accelerator: "auto"                                                           # Accelerator.
  callbacks:
    - {name: "model_checkpoint", filename: *fullname, monitor: "val/", mode: "max"}
    - {name: "model_checkpoint", filename: *fullname, monitor: "val/", mode: "max", save_last: True}
    - {name: "log_training_progress", "filename": "log.csv", "every_n_epochs": 1, verbose: *verbose}
    - {name: "learning_rate_monitor"}
    - {name: "rich_model_summary", max_depth: 2}
    - {name: "rich_progress_bar", refresh_rate: 1, leave: False}
  check_val_every_n_epoch: 1                                                    # Run validation loop every after every `n` training epochs.
  default_root_dir       : *save_dir                                            # Default path for logs and weights.
  devices                : "auto"                                               # Will be mapped to either `gpus`, `tpu_cores`, `num_processes` or `ipus`.
  enable_checkpointing   : True                                                 
  enable_model_summary   : True                                                 
  enable_progress_bar    : True                                                 
  log_every_n_steps      : 1                                                    # How often to log within steps.
  logger                 : True                                                 # Logger (or iterable collection of loggers) for experiment tracking (True = `TensorBoardLogger`).
  max_epochs             : *epochs                                              # -1: infinite training.
  precision              : 32                                                   # Double precision (64), full precision (32), half precision (16) or bfloat16 precision (bf16).
  strategy               : "auto"                                               # 'ddp', 'ddp_spawn', 'ddp2', 'ddp_cpu', 'ddp2_cpu', 'ddp_spawn_cpu', 'horovod', 'tpu', 'tpu_spawn', 'auto'.
